{"version":3,"sources":["components/Card.js","widgets/PiHole.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","useState","handleReferance","setHandleReferance","dragStartLeft","setdragStartLeft","dragStartTop","setdragStartTop","dragStartX","setdragStartX","dragStartY","setdragStartY","initialiseDrag","event","persist","target","clientX","clientY","offsetTop","offsetLeft","getBoundingClientRect","left","top","window","addEventListener","startDragging","stopDragging","style","removeEventListener","width","height","localStorage","setItem","name","JSON","stringify","className","ref","elementDetails","parse","getItem","onMouseDown","header","children","PiHole","result","setResult","setError","useEffect","fetchPiholeData","setInterval","a","fetch","then","res","json","fetchedTime","Date","toLocaleString","error","unique_clients","status","domains_being_blocked","Math","round","ads_percentage_today","dns_queries_today","App","src","alt","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","headers","response","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.198086ec.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport './card.css';\r\n\r\nfunction Card(props) {\r\n    const [handleReferance, setHandleReferance] = useState(null);\r\n    const [dragStartLeft, setdragStartLeft] = useState(0);\r\n    const [dragStartTop, setdragStartTop] = useState(0);\r\n    const [dragStartX, setdragStartX] = useState(0);\r\n    const [dragStartY, setdragStartY] = useState(0);\r\n\r\n    const setHandleRef = (ref) => {\r\n\r\n        if (ref === null)\r\n            return;\r\n\r\n        setHandleReferance(ref);\r\n\r\n        var elementDetails = JSON.parse(localStorage.getItem(props.name));\r\n        if (elementDetails) {\r\n            ref.style.left = elementDetails.left + 'px';\r\n            ref.style.top = elementDetails.top + 'px';\r\n        }\r\n    };\r\n\r\n    const initialiseDrag = (event) => {\r\n        if (handleReferance == null)\r\n            return;\r\n\r\n            event.persist();\r\n\r\n        const { target, clientX, clientY } = event;\r\n        const { offsetTop, offsetLeft } = target;\r\n        const { left, top } = handleReferance.getBoundingClientRect();\r\n\r\n        setdragStartLeft(left - offsetLeft);\r\n        setdragStartTop(top - offsetTop);\r\n        setdragStartX(clientX);\r\n        setdragStartY(clientY);\r\n\r\n      window.addEventListener(\"mousemove\", startDragging, false);\r\n      window.addEventListener(\"mouseup\", stopDragging, false);\r\n    };\r\n\r\n    const startDragging = ({ clientX, clientY }) => {\r\n        if (handleReferance == null)\r\n            return;\r\n\r\n            handleReferance.style.top = (dragStartTop + clientY - dragStartY) + \"px\";\r\n            handleReferance.style.left = (dragStartLeft + clientX - dragStartX) + \"px\";\r\n    };\r\n\r\n    const stopDragging = () => {\r\n        if (handleReferance == null)\r\n            return;\r\n\r\n        window.removeEventListener(\"mousemove\", startDragging, false);\r\n        window.removeEventListener(\"mouseup\", stopDragging, false);\r\n  \r\n        const { left, top, width, height } = handleReferance.getBoundingClientRect();\r\n        localStorage.setItem(props.name, JSON.stringify({\r\n          left: left,\r\n          top: top,\r\n          width: width,\r\n          height: height\r\n        }));\r\n    };\r\n\r\n    const header = () => {\r\n        return (\r\n            <div\r\n            className=\"cardHeader\"\r\n              onMouseDown={initialiseDrag}\r\n            >\r\n              {props.header && props.header }\r\n              <p className=\"title\">{props.name}</p>\r\n            </div>\r\n        );\r\n    };\r\n  \r\n    return (\r\n        <>\r\n            <div className=\"card\" ref={setHandleRef}>\r\n                {header()}\r\n                <div className=\"content\">{props.children}</div>\r\n            </div>\r\n        </>\r\n    );\r\n  };\r\n  \r\n  export default Card;\r\n","import React, { useState, useEffect  } from 'react';\r\nimport Card from '../components/Card';\r\nimport './PiHole.css';\r\n\r\nfunction PiHole() {\r\n  const [result, setResult] = useState('');\r\n  const [error, setError] = useState(false);\r\n\r\n  useEffect(() => {\r\n    fetchPiholeData();\r\n      setInterval(async () => {\r\n        fetchPiholeData()\r\n      }, 60000);\r\n  });\r\n\r\n  const fetchPiholeData = () => {\r\n    setError(false);\r\n    fetch(\"http://192.168.1.135/admin/api.php\")\r\n    .then((res) => res.json())\r\n    .then(\r\n      (result) => {\r\n          result.fetchedTime = new Date().toLocaleString();\r\n        setResult(result);\r\n      },\r\n      (error) => {\r\n        setError(true);\r\n      }\r\n    );\r\n  };\r\n\r\n  const header = () => {\r\n    return (\r\n        <>\r\n          <div className=\"headerRight\">\r\n          <p className=\"uniqueClients\">\r\n                {result && result.unique_clients}\r\n              </p>\r\n            <span className={result && result.status === \"enabled\" ? 'active' : 'inactive'}></span>\r\n          </div>\r\n        </>\r\n      );\r\n  };\r\n\r\n  return (\r\n    <>\r\n        <Card name=\"PiHole\" header={header()}>\r\n          <div className=\"columnLeft\">\r\n            <p>Domains Being Blocked: </p>\r\n            <p>Precent of blocked traffic: </p>\r\n            <p>DNS queries Today: </p>\r\n          </div>\r\n          <div className=\"columnRight\">\r\n            <p>\r\n              {result && result.domains_being_blocked}\r\n            </p>\r\n            <p>\r\n              {result &&\r\n                Math.round(result.ads_percentage_today * 100) /\r\n                  100}{\" \"}\r\n              %\r\n            </p>\r\n            <p>{result && result.dns_queries_today}</p>\r\n            <p>{result && result.fetchedTime}</p>\r\n          </div>\r\n        </Card>\r\n      </>\r\n  );\r\n};\r\n\r\nexport default PiHole;","import React from 'react';\r\nimport PiHole from './widgets/PiHole';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div >\r\n      \t\t\t<img src=\"http://i.stack.imgur.com/SBv4T.gif\" alt=\"this slowpoke moves\"  width=\"250\" />\r\n\r\n      <PiHole />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}